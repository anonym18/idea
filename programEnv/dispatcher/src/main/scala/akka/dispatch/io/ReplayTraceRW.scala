package akka.dispatch.io

import akka.dispatch.Settings
import akka.dispatch.util.FileUtils
import debugger.protocol.Event
import debugger.protocol.Events.EventJsonFormat
import spray.json._

class ReplayTraceRW(replayEvents: List[String] = ReplayTraceRW.getTraceEvents) {

  private val eventsView = for (s <- replayEvents.view) yield parseEvent(s)

  private var current: Int = 0

  def hasNext: Boolean = replayEvents.size > current

  def peek: Event = eventsView(current)

  def consume(): Unit = current += 1

  def parseEvent(s: String): Event = EventJsonFormat.read(s.parseJson)
}


object ReplayTraceRW {
  def getTraceEvents: List[String] =
    Settings.debuggerSettings.replayTraceFile match {
    case Some(file) => FileUtils.readFromFile(file)
    case None =>
      println("No valid event trace file provided in configuration file. No actions to replay.")
      List()
  }

  def saveEventsToFile(fileName: String, events: List[Event]): Unit = // events generated by the user choice
    FileUtils.printToFile(fileName) { p =>
      events.foreach(e => p.println(EventJsonFormat.write(e)))
    }
}